import UIKit

class TopArtistsViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {

    // MARK: - Properties
    
    var topArtists: [Artist] = [] // Populate this array with actual top-rated artists data
    var featuredArtists: [Artist] = [] // Populate this array with actual featured artists data

    // MARK: - UI Components
    
    let topArtistsLabel: UILabel = {
        let label = UILabel()
        label.text = "Top Rated Artists"
        label.font = UIFont.systemFont(ofSize: 24, weight: .bold)
        return label
    }()
    
    let featuredArtistsLabel: UILabel = {
        let label = UILabel()
        label.text = "Featured Artists"
        label.font = UIFont.systemFont(ofSize: 24, weight: .bold)
        return label
    }()
    
    let topArtistsTableView: UITableView = {
        let tableView = UITableView()
        tableView.backgroundColor = .white
        tableView.separatorStyle = .none
        return tableView
    }()
    
    let featuredArtistsTableView: UITableView = {
        let tableView = UITableView()
        tableView.backgroundColor = .white
        tableView.separatorStyle = .none
        return tableView
    }()

    // MARK: - Lifecycle Methods
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureUI()
        fetchTopArtists()
        fetchFeaturedArtists()
    }

    // MARK: - Private Methods
    
    private func configureUI() {
        view.backgroundColor = .white

        view.addSubview(topArtistsLabel)
        view.addSubview(topArtistsTableView)
        view.addSubview(featuredArtistsLabel)
        view.addSubview(featuredArtistsTableView)

        // Set up constraints (adjust as needed for your layout)
        topArtistsLabel.translatesAutoresizingMaskIntoConstraints = false
        topArtistsTableView.translatesAutoresizingMaskIntoConstraints = false
        featuredArtistsLabel.translatesAutoresizingMaskIntoConstraints = false
        featuredArtistsTableView.translatesAutoresizingMaskIntoConstraints = false

        NSLayoutConstraint.activate([
            topArtistsLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),
            topArtistsLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            
            topArtistsTableView.topAnchor.constraint(equalTo: topArtistsLabel.bottomAnchor, constant: 10),
            topArtistsTableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            topArtistsTableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            topArtistsTableView.heightAnchor.constraint(equalToConstant: 200), // Adjust the height as needed
            
            featuredArtistsLabel.topAnchor.constraint(equalTo: topArtistsTableView.bottomAnchor, constant: 20),
            featuredArtistsLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            
            featuredArtistsTableView.topAnchor.constraint(equalTo: featuredArtistsLabel.bottomAnchor, constant: 10),
            featuredArtistsTableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            featuredArtistsTableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            featuredArtistsTableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
        ])

        topArtistsTableView.dataSource = self
        topArtistsTableView.delegate = self

        // Register custom cell
        topArtistsTableView.register(ArtistTableViewCell.self, forCellReuseIdentifier: "ArtistCell")

        featuredArtistsTableView.dataSource = self
        featuredArtistsTableView.delegate = self

        // Register custom cell for featured artists
        featuredArtistsTableView.register(ArtistTableViewCell.self, forCellReuseIdentifier: "FeaturedArtistCell")
    }

    private func fetchTopArtists() {
        // Fetch and populate top-rated artists data
        // Replace this with your actual data fetching logic
        // For example, you might fetch top artists from a database or API
        // In this example, we're using a sample array
        topArtists = [
            Artist(artistId: "1", stageName: "John Doe", bio: "Talented musician", genres: ["Pop", "Rock"], channelVideos: [], ratings: [], bookingRequests: [], subscriptionStatus: true),
            Artist(artistId: "2", stageName: "Jane Smith", bio: "Soulful singer", genres: ["R&B", "Soul"], channelVideos: [], ratings: [], bookingRequests: [], subscriptionStatus: false),
            // Add more top-rated artists as needed
        ]

        // Reload the table view to reflect the updated data
        topArtistsTableView.reloadData()
    }

    private func fetchFeaturedArtists() {
        // Fetch and populate featured artists data
        // Replace this with your actual data fetching logic
        // For example, you might fetch featured artists from a database or API
        // In this example, we're using a sample array
        featuredArtists = [
            Artist(artistId: "3", stageName: "Featured Artist 1", bio: "Amazing talent", genres: ["Pop", "Electronic"], channelVideos: [], ratings: [], bookingRequests: [], subscriptionStatus: true),
            Artist(artistId: "4", stageName: "Featured Artist 2", bio: "Captivating performer", genres: ["Indie", "Alternative"], channelVideos: [], ratings: [], bookingRequests: [], subscriptionStatus: false),
            // Add more featured artists as needed
        ]

        // Reload the table view to reflect the updated data
        featuredArtistsTableView.reloadData()
    }

    // MARK: - UITableViewDataSource Methods

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if tableView == topArtistsTableView {
            return topArtists.count
        } else {
            return featuredArtists.count
        }
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: tableView == topArtistsTableView ? "ArtistCell" : "FeaturedArtistCell", for: indexPath) as? ArtistTableViewCell else {
            return UITableViewCell()
        }

        let artist = tableView == topArtistsTableView ? topArtists[indexPath.row] : featuredArtists[indexPath.row]
        cell.configure(with: artist)

        return cell
    }

    // MARK: - UITableViewDelegate Methods

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 120
    }
}
