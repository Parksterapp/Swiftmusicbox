import UIKit

class NotificationPreferencesViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {

    // MARK: - Properties
    
    var notificationPreferences: [NotificationPreference] = [] // Populate this array with actual notification preferences data

    // MARK: - UI Components
    
    let notificationPreferencesLabel: UILabel = {
        let label = UILabel()
        label.text = "Notification Preferences"
        label.font = UIFont.systemFont(ofSize: 24, weight: .bold)
        return label
    }()
    
    let notificationPreferencesTableView: UITableView = {
        let tableView = UITableView()
        tableView.backgroundColor = .white
        tableView.separatorStyle = .singleLine
        return tableView
    }()

    // MARK: - Lifecycle Methods
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureUI()
        fetchNotificationPreferences()
    }

    // MARK: - Private Methods
    
    private func configureUI() {
        view.backgroundColor = .white

        view.addSubview(notificationPreferencesLabel)
        view.addSubview(notificationPreferencesTableView)

        // Set up constraints (adjust as needed for your layout)
        notificationPreferencesLabel.translatesAutoresizingMaskIntoConstraints = false
        notificationPreferencesTableView.translatesAutoresizingMaskIntoConstraints = false

        NSLayoutConstraint.activate([
            notificationPreferencesLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),
            notificationPreferencesLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            
            notificationPreferencesTableView.topAnchor.constraint(equalTo: notificationPreferencesLabel.bottomAnchor, constant: 10),
            notificationPreferencesTableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            notificationPreferencesTableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            notificationPreferencesTableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
        ])

        notificationPreferencesTableView.dataSource = self
        notificationPreferencesTableView.delegate = self

        // Register custom cell
        notificationPreferencesTableView.register(NotificationPreferenceTableViewCell.self, forCellReuseIdentifier: "NotificationPreferenceCell")
    }

    private func fetchNotificationPreferences() {
        // Fetch and populate notification preferences data
        // Replace this with your actual data fetching logic
        // For example, you might fetch notification preferences from a database or API
        // In this example, we're using a sample array
        notificationPreferences = [
            NotificationPreference(title: "Event Reminders", isEnabled: true),
            NotificationPreference(title: "New Artist Updates", isEnabled: true),
            NotificationPreference(title: "Exclusive Opportunities", isEnabled: false),
            // Add more notification preferences as needed
        ]

        // Reload the table view to reflect the updated data
        notificationPreferencesTableView.reloadData()
    }

    // MARK: - UITableViewDataSource Methods

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return notificationPreferences.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "NotificationPreferenceCell", for: indexPath) as? NotificationPreferenceTableViewCell else {
            return UITableViewCell()
        }

        let notificationPreference = notificationPreferences[indexPath.row]
        cell.configure(with: notificationPreference)

        return cell
    }

    // MARK: - UITableViewDelegate Methods

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 80
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)

        // Handle user's selection, e.g., toggle notification preference
        let selectedPreference = notificationPreferences[indexPath.row]
        print("Selected notification preference: \(selectedPreference.title)")
        // Implement your logic for handling the selected notification preference
    }
}
