import UIKit

class AccountSettingsViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {

    // MARK: - Properties
    
    var accountSettings: [AccountSetting] = [] // Populate this array with actual account settings data

    // MARK: - UI Components
    
    let accountSettingsLabel: UILabel = {
        let label = UILabel()
        label.text = "Account Settings"
        label.font = UIFont.systemFont(ofSize: 24, weight: .bold)
        return label
    }()
    
    let accountSettingsTableView: UITableView = {
        let tableView = UITableView()
        tableView.backgroundColor = .white
        tableView.separatorStyle = .singleLine
        return tableView
    }()

    // MARK: - Lifecycle Methods
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureUI()
        fetchAccountSettings()
    }

    // MARK: - Private Methods
    
    private func configureUI() {
        view.backgroundColor = .white

        view.addSubview(accountSettingsLabel)
        view.addSubview(accountSettingsTableView)

        // Set up constraints (adjust as needed for your layout)
        accountSettingsLabel.translatesAutoresizingMaskIntoConstraints = false
        accountSettingsTableView.translatesAutoresizingMaskIntoConstraints = false

        NSLayoutConstraint.activate([
            accountSettingsLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),
            accountSettingsLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            
            accountSettingsTableView.topAnchor.constraint(equalTo: accountSettingsLabel.bottomAnchor, constant: 10),
            accountSettingsTableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            accountSettingsTableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            accountSettingsTableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
        ])

        accountSettingsTableView.dataSource = self
        accountSettingsTableView.delegate = self

        // Register custom cell
        accountSettingsTableView.register(AccountSettingTableViewCell.self, forCellReuseIdentifier: "AccountSettingCell")
    }

    private func fetchAccountSettings() {
        // Fetch and populate account settings data
        // Replace this with your actual data fetching logic
        // For example, you might fetch account settings from a database or API
        // In this example, we're using a sample array
        accountSettings = [
            AccountSetting(title: "Edit Username", detail: "JohnDoe"),
            AccountSetting(title: "Change Email", detail: "johndoe@email.com"),
            AccountSetting(title: "Change Password", detail: "••••••••"),
            // Add more account settings as needed
        ]

        // Reload the table view to reflect the updated data
        accountSettingsTableView.reloadData()
    }

    // MARK: - UITableViewDataSource Methods

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return accountSettings.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "AccountSettingCell", for: indexPath) as? AccountSettingTableViewCell else {
            return UITableViewCell()
        }

        let accountSetting = accountSettings[indexPath.row]
        cell.configure(with: accountSetting)

        return cell
    }

    // MARK: - UITableViewDelegate Methods

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 80
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)

        // Handle user's selection, e.g., navigate to the appropriate screen for editing
        let selectedSetting = accountSettings[indexPath.row]
        print("Selected account setting: \(selectedSetting.title)")
        // Implement your logic for handling the selected account setting
    }
}
