import UIKit

class NotificationsViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {

    // MARK: - Properties
    
    var notifications: [Notification] = [] // Populate this array with actual notification data

    // MARK: - UI Components
    
    let notificationsLabel: UILabel = {
        let label = UILabel()
        label.text = "Notifications"
        label.font = UIFont.systemFont(ofSize: 24, weight: .bold)
        return label
    }()
    
    let notificationsTableView: UITableView = {
        let tableView = UITableView()
        tableView.backgroundColor = .white
        tableView.separatorStyle = .singleLine
        return tableView
    }()

    // MARK: - Lifecycle Methods
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureUI()
        fetchNotifications()
    }

    // MARK: - Private Methods
    
    private func configureUI() {
        view.backgroundColor = .white

        view.addSubview(notificationsLabel)
        view.addSubview(notificationsTableView)

        // Set up constraints (adjust as needed for your layout)
        notificationsLabel.translatesAutoresizingMaskIntoConstraints = false
        notificationsTableView.translatesAutoresizingMaskIntoConstraints = false

        NSLayoutConstraint.activate([
            notificationsLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),
            notificationsLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            
            notificationsTableView.topAnchor.constraint(equalTo: notificationsLabel.bottomAnchor, constant: 10),
            notificationsTableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            notificationsTableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            notificationsTableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
        ])

        notificationsTableView.dataSource = self
        notificationsTableView.delegate = self

        // Register custom cell
        notificationsTableView.register(NotificationTableViewCell.self, forCellReuseIdentifier: "NotificationCell")
    }

    private func fetchNotifications() {
        // Fetch and populate notifications data
        // Replace this with your actual data fetching logic
        // For example, you might fetch notifications from a database or API
        // In this example, we're using a sample array
        notifications = [
            Notification(title: "New Event Reminder", content: "Don't miss the live concert tomorrow!"),
            Notification(title: "Booking Confirmation", content: "Your booking request for John Doe has been confirmed."),
            Notification(title: "Exclusive Opportunity", content: "You have won a chance to attend a private studio session."),
            // Add more notifications as needed
        ]

        // Reload the table view to reflect the updated data
        notificationsTableView.reloadData()
    }

    // MARK: - UITableViewDataSource Methods

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return notifications.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "NotificationCell", for: indexPath) as? NotificationTableViewCell else {
            return UITableViewCell()
        }

        let notification = notifications[indexPath.row]
        cell.configure(with: notification)

        return cell
    }

    // MARK: - UITableViewDelegate Methods

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 80
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)

        // Handle user's selection, e.g., navigate to the details screen for the selected notification
        let selectedNotification = notifications[indexPath.row]
        print("Selected notification: \(selectedNotification.title)")
        // Implement your logic for handling the selected notification
    }
}
