import UIKit

class SearchViewController: UIViewController, UISearchBarDelegate, UITableViewDataSource, UITableViewDelegate {

    // MARK: - Properties
    
    var searchResults: [SearchResult] = [] // Populate this array with actual search results data

    // MARK: - UI Components
    
    let searchBar: UISearchBar = {
        let searchBar = UISearchBar()
        searchBar.placeholder = "Search for artists, performances, or events"
        searchBar.searchBarStyle = .minimal
        return searchBar
    }()
    
    let searchResultsTableView: UITableView = {
        let tableView = UITableView()
        tableView.backgroundColor = .white
        tableView.separatorStyle = .singleLine
        return tableView
    }()

    // MARK: - Lifecycle Methods
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureUI()
    }

    // MARK: - Private Methods
    
    private func configureUI() {
        view.backgroundColor = .white

        view.addSubview(searchBar)
        view.addSubview(searchResultsTableView)

        // Set up constraints (adjust as needed for your layout)
        searchBar.translatesAutoresizingMaskIntoConstraints = false
        searchResultsTableView.translatesAutoresizingMaskIntoConstraints = false

        NSLayoutConstraint.activate([
            searchBar.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            searchBar.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            searchBar.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            
            searchResultsTableView.topAnchor.constraint(equalTo: searchBar.bottomAnchor),
            searchResultsTableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            searchResultsTableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            searchResultsTableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
        ])

        searchBar.delegate = self
        searchResultsTableView.dataSource = self
        searchResultsTableView.delegate = self

        // Register custom cell
        searchResultsTableView.register(SearchResultTableViewCell.self, forCellReuseIdentifier: "SearchResultCell")
    }

    // MARK: - UISearchBarDelegate Methods
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        // Implement search logic based on the entered text
        // For simplicity, let's assume you have a function fetchSearchResults that returns search results based on the given query
        searchResults = fetchSearchResults(query: searchText)
        searchResultsTableView.reloadData()
    }

    // Replace this with your actual search logic
    private func fetchSearchResults(query: String) -> [SearchResult] {
        // Example: Fetch search results from a database or API based on the query
        // In this example, we're using a sample array
        return [
            SearchResult(type: .artist, name: "John Doe", details: "Singer-Songwriter"),
            SearchResult(type: .performance, name: "Live Concert", details: "John Doe"),
            SearchResult(type: .event, name: "Music Festival", details: "Various Artists"),
            // Add more search results as needed
        ]
    }

    // MARK: - UITableViewDataSource Methods

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return searchResults.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "SearchResultCell", for: indexPath) as? SearchResultTableViewCell else {
            return UITableViewCell()
        }

        let searchResult = searchResults[indexPath.row]
        cell.configure(with: searchResult)

        return cell
    }

    // MARK: - UITableViewDelegate Methods

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 80
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)

        // Handle user's selection, e.g., navigate to the details screen for the selected search result
        let selectedResult = searchResults[indexPath.row]
        print("Selected search result: \(selectedResult.name) - \(selectedResult.type.rawValue)")
        // Implement your logic for handling the selected search result
    }
}
