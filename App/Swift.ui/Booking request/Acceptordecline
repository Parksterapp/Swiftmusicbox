import UIKit

class BookingRequestsViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {

    // MARK: - Properties
    
    var artist: Artist? // Set this property to the logged-in artist
    var bookingRequests: [BookingRequest] = [] // Populate this array with actual booking requests data

    // MARK: - UI Components
    
    let requestsLabel: UILabel = {
        let label = UILabel()
        label.text = "Booking Requests"
        label.font = UIFont.systemFont(ofSize: 24, weight: .bold)
        return label
    }()
    
    let requestsTableView: UITableView = {
        let tableView = UITableView()
        tableView.backgroundColor = .white
        tableView.separatorStyle = .none
        return tableView
    }()

    // MARK: - Lifecycle Methods
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureUI()
        fetchBookingRequests()
    }

    // MARK: - Private Methods
    
    private func configureUI() {
        view.backgroundColor = .white

        view.addSubview(requestsLabel)
        view.addSubview(requestsTableView)

        // Set up constraints (adjust as needed for your layout)
        requestsLabel.translatesAutoresizingMaskIntoConstraints = false
        requestsTableView.translatesAutoresizingMaskIntoConstraints = false

        NSLayoutConstraint.activate([
            requestsLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),
            requestsLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            
            requestsTableView.topAnchor.constraint(equalTo: requestsLabel.bottomAnchor, constant: 10),
            requestsTableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            requestsTableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            requestsTableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
        ])

        requestsTableView.dataSource = self
        requestsTableView.delegate = self

        // Register custom cell
        requestsTableView.register(BookingRequestTableViewCell.self, forCellReuseIdentifier: "BookingRequestCell")
    }

    private func fetchBookingRequests() {
        // Fetch and populate booking requests data for the artist
        // Replace this with your actual data fetching logic
        // For example, you might fetch requests from a database or API
        // In this example, we're using a sample array
        bookingRequests = [
            BookingRequest(user: User(name: "Event Organizer 1"), status: .pending, date: Date(), venue: "Venue A", message: "Would like to book you for an event."),
            BookingRequest(user: User(name: "Event Organizer 2"), status: .confirmed, date: Date(), venue: "Venue B", message: "Confirmation for the upcoming event."),
            // Add more booking requests as needed
        ]

        // Reload the table view to reflect the updated data
        requestsTableView.reloadData()
    }

    // MARK: - UITableViewDataSource Methods

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return bookingRequests.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "BookingRequestCell", for: indexPath) as? BookingRequestTableViewCell else {
            return UITableViewCell()
        }

        let request = bookingRequests[indexPath.row]
        cell.configure(with: request)
        cell.acceptButton.tag = indexPath.row
        cell.declineButton.tag = indexPath.row
        cell.acceptButton.addTarget(self, action: #selector(acceptButtonTapped(_:)), for: .touchUpInside)
        cell.declineButton.addTarget(self, action: #selector(declineButtonTapped(_:)), for: .touchUpInside)

        return cell
    }

    // MARK: - UITableViewDelegate Methods

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 120
    }

    @objc private func acceptButtonTapped(_ sender: UIButton) {
        let selectedRequest = bookingRequests[sender.tag]
        // Implement logic to accept the booking request
        print("Accepted: \(selectedRequest)")
    }

    @objc private func declineButtonTapped(_ sender: UIButton) {
        let selectedRequest = bookingRequests[sender.tag]
        // Implement logic to decline the booking request
        print("Declined: \(selectedRequest)")
    }
}
