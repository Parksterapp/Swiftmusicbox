import UIKit

class HomeViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {

    // MARK: - UI Components
    
    let topRatedPerformancesLabel: UILabel = {
        let label = UILabel()
        label.text = "Top-Rated Performances"
        label.font = UIFont.systemFont(ofSize: 24, weight: .bold)
        return label
    }()
    
    let performancesTableView: UITableView = {
        let tableView = UITableView()
        tableView.backgroundColor = .white
        tableView.separatorStyle = .none
        return tableView
    }()

    // Sample data for top-rated performances (replace with your actual data)
    let topRatedPerformances: [Performance] = [
        Performance(title: "Amazing Concert", artist: "John Doe", date: Date(), venue: "Music Hall", description: "An incredible live performance by John Doe."),
        Performance(title: "Rock Showcase", artist: "Jane Smith", date: Date(), venue: "Rock Arena", description: "Jane Smith rocking the stage with a powerful performance."),
        // Add more performances as needed
    ]

    // MARK: - Lifecycle Methods
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureUI()
    }

    // MARK: - Private Methods
    
    private func configureUI() {
        view.backgroundColor = .white

        view.addSubview(topRatedPerformancesLabel)
        view.addSubview(performancesTableView)

        // Set up constraints (adjust as needed for your layout)
        topRatedPerformancesLabel.translatesAutoresizingMaskIntoConstraints = false
        performancesTableView.translatesAutoresizingMaskIntoConstraints = false

        NSLayoutConstraint.activate([
            topRatedPerformancesLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),
            topRatedPerformancesLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            
            performancesTableView.topAnchor.constraint(equalTo: topRatedPerformancesLabel.bottomAnchor, constant: 10),
            performancesTableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            performancesTableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            performancesTableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
        ])

        performancesTableView.dataSource = self
        performancesTableView.delegate = self

        // Register custom cell
        performancesTableView.register(PerformanceTableViewCell.self, forCellReuseIdentifier: "PerformanceCell")
    }

    // MARK: - UITableViewDataSource Methods

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return topRatedPerformances.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "PerformanceCell", for: indexPath) as? PerformanceTableViewCell else {
            return UITableViewCell()
        }

        let performance = topRatedPerformances[indexPath.row]
        cell.configure(with: performance)

        return cell
    }

    // MARK: - UITableViewDelegate Methods

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 120
    }
}
