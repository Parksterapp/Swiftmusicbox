import UIKit

class HomeViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {

    // MARK: - UI Components
    
    let featuredArtistsLabel: UILabel = {
        let label = UILabel()
        label.text = "Featured Artists"
        label.font = UIFont.systemFont(ofSize: 24, weight: .bold)
        return label
    }()
    
    let artistsCollectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.backgroundColor = .white
        collectionView.showsHorizontalScrollIndicator = false
        return collectionView
    }()

    // Sample data for artists (replace with your actual data)
    let featuredArtists: [Artist] = [
        Artist(name: "John Doe", genre: "Pop", profileImage: "john_doe"),
        Artist(name: "Jane Smith", genre: "Rock", profileImage: "jane_smith"),
        // Add more artists as needed
    ]

    // MARK: - Lifecycle Methods
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureUI()
    }

    // MARK: - Private Methods
    
    private func configureUI() {
        view.backgroundColor = .white

        view.addSubview(featuredArtistsLabel)
        view.addSubview(artistsCollectionView)

        // Set up constraints (adjust as needed for your layout)
        featuredArtistsLabel.translatesAutoresizingMaskIntoConstraints = false
        artistsCollectionView.translatesAutoresizingMaskIntoConstraints = false

        NSLayoutConstraint.activate([
            featuredArtistsLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),
            featuredArtistsLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            
            artistsCollectionView.topAnchor.constraint(equalTo: featuredArtistsLabel.bottomAnchor, constant: 10),
            artistsCollectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            artistsCollectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            artistsCollectionView.heightAnchor.constraint(equalToConstant: 150),
        ])

        // Register custom cell
        artistsCollectionView.register(ArtistCollectionViewCell.self, forCellWithReuseIdentifier: "ArtistCell")

        artistsCollectionView.dataSource = self
        artistsCollectionView.delegate = self
    }

    // MARK: - UICollectionViewDataSource Methods

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return featuredArtists.count
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ArtistCell", for: indexPath) as? ArtistCollectionViewCell else {
            return UICollectionViewCell()
        }

        let artist = featuredArtists[indexPath.item]
        cell.configure(with: artist)

        return cell
    }

    // MARK: - UICollectionViewDelegateFlowLayout Methods

    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: 120, height: 150)
    }
}
