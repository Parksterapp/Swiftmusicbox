import UIKit

class HomeViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {

    // MARK: - UI Components
    
    let specialEventsLabel: UILabel = {
        let label = UILabel()
        label.text = "Special Events and Promotions"
        label.font = UIFont.systemFont(ofSize: 24, weight: .bold)
        return label
    }()
    
    let eventsTableView: UITableView = {
        let tableView = UITableView()
        tableView.backgroundColor = .white
        tableView.separatorStyle = .none
        return tableView
    }()

    // Sample data for special events (replace with your actual data)
    let specialEvents: [Event] = [
        Event(title: "Music Festival", date: Date(), location: "City Park", description: "Join us for a day of music and fun!"),
        Event(title: "Exclusive Artist Meetup", date: Date(), location: "MusicBox HQ", description: "Meet your favorite artists and enjoy exclusive performances."),
        // Add more events as needed
    ]

    // MARK: - Lifecycle Methods
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureUI()
    }

    // MARK: - Private Methods
    
    private func configureUI() {
        view.backgroundColor = .white

        view.addSubview(specialEventsLabel)
        view.addSubview(eventsTableView)

        // Set up constraints (adjust as needed for your layout)
        specialEventsLabel.translatesAutoresizingMaskIntoConstraints = false
        eventsTableView.translatesAutoresizingMaskIntoConstraints = false

        NSLayoutConstraint.activate([
            specialEventsLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),
            specialEventsLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            
            eventsTableView.topAnchor.constraint(equalTo: specialEventsLabel.bottomAnchor, constant: 10),
            eventsTableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            eventsTableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            eventsTableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
        ])

        eventsTableView.dataSource = self
        eventsTableView.delegate = self

        // Register custom cell
        eventsTableView.register(EventTableViewCell.self, forCellReuseIdentifier: "EventCell")
    }

    // MARK: - UITableViewDataSource Methods

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return specialEvents.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "EventCell", for: indexPath) as? EventTableViewCell else {
            return UITableViewCell()
        }

        let event = specialEvents[indexPath.row]
        cell.configure(with: event)

        return cell
    }

    // MARK: - UITableViewDelegate Methods

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 120
    }
}
